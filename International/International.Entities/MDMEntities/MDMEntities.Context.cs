//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace International.Entities.MDMEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MDMEntities : DbContext
    {
        public MDMEntities()
            : base("name=MDMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BrokerAddress> BrokerAddresses { get; set; }
        public virtual DbSet<BrokerProductLine> BrokerProductLines { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ContactPersonBroker> ContactPersonBrokers { get; set; }
        public virtual DbSet<ContactPersonInsured> ContactPersonInsureds { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<IndustryCode> IndustryCodes { get; set; }
        public virtual DbSet<InsuredAddress> InsuredAddresses { get; set; }
        public virtual DbSet<InsuredAlia> InsuredAlias { get; set; }
        public virtual DbSet<InsuredParty> InsuredParties { get; set; }
        public virtual DbSet<MasterInsured> MasterInsureds { get; set; }
        public virtual DbSet<NAIC> NAICs { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TypeMaster> TypeMasters { get; set; }
        public virtual DbSet<UnderwriterProductLine> UnderwriterProductLines { get; set; }
        public virtual DbSet<InsuredParty_Backup_2802016> InsuredParty_Backup_2802016 { get; set; }
        public virtual DbSet<MasterInsureds_Backup_2802016> MasterInsureds_Backup_2802016 { get; set; }
        public virtual DbSet<Reasoncode> Reasoncodes { get; set; }
        public virtual DbSet<Coverage> Coverages { get; set; }
        public virtual DbSet<PolicyType> PolicyTypes { get; set; }
        public virtual DbSet<CurrencyRegion> CurrencyRegions { get; set; }
        public virtual DbSet<FormType> FormTypes { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<PolicySymbol> PolicySymbols { get; set; }
        public virtual DbSet<Broker> Brokers { get; set; }
        public virtual DbSet<BrokerParty> BrokerParties { get; set; }
        public virtual DbSet<BrokerProductLineSubType> BrokerProductLineSubTypes { get; set; }
        public virtual DbSet<ProductLineSubType> ProductLineSubTypes { get; set; }
        public virtual DbSet<Underwriter> Underwriters { get; set; }
        public virtual DbSet<UnderwriterProductSubLine> UnderwriterProductSubLines { get; set; }
        public virtual DbSet<ProductLine> ProductLines { get; set; }
        public virtual DbSet<ProfitCode> ProfitCodes { get; set; }
        public virtual DbSet<SectionCode> SectionCodes { get; set; }
    
        public virtual ObjectResult<SearchBrokerByProductLine_Result> SearchBrokerByProductLine(string brokerkey, Nullable<System.Guid> brokerId, Nullable<short> productlineId, Nullable<short> productlineSubTypeid, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expiryDate)
        {
            var brokerkeyParameter = brokerkey != null ?
                new ObjectParameter("Brokerkey", brokerkey) :
                new ObjectParameter("Brokerkey", typeof(string));
    
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(System.Guid));
    
            var productlineIdParameter = productlineId.HasValue ?
                new ObjectParameter("ProductlineId", productlineId) :
                new ObjectParameter("ProductlineId", typeof(short));
    
            var productlineSubTypeidParameter = productlineSubTypeid.HasValue ?
                new ObjectParameter("ProductlineSubTypeid", productlineSubTypeid) :
                new ObjectParameter("ProductlineSubTypeid", typeof(short));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchBrokerByProductLine_Result>("SearchBrokerByProductLine", brokerkeyParameter, brokerIdParameter, productlineIdParameter, productlineSubTypeidParameter, effectiveDateParameter, expiryDateParameter);
        }
    
        public virtual ObjectResult<SearchBrokerContact_Result> SearchBrokerContact(string key, Nullable<System.Guid> brokerEntityId, Nullable<System.Guid> contactPersonId)
        {
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var brokerEntityIdParameter = brokerEntityId.HasValue ?
                new ObjectParameter("BrokerEntityId", brokerEntityId) :
                new ObjectParameter("BrokerEntityId", typeof(System.Guid));
    
            var contactPersonIdParameter = contactPersonId.HasValue ?
                new ObjectParameter("ContactPersonId", contactPersonId) :
                new ObjectParameter("ContactPersonId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchBrokerContact_Result>("SearchBrokerContact", keyParameter, brokerEntityIdParameter, contactPersonIdParameter);
        }
    
        public virtual ObjectResult<SearchBrokerEntityByProductLine_Result> SearchBrokerEntityByProductLine(Nullable<System.Guid> brokerId, string brokerEntitykey, Nullable<System.Guid> brokerEntityId, Nullable<short> productlineId, Nullable<short> productlineSubTypeid, Nullable<bool> isBrokerEntity)
        {
            var brokerIdParameter = brokerId.HasValue ?
                new ObjectParameter("BrokerId", brokerId) :
                new ObjectParameter("BrokerId", typeof(System.Guid));
    
            var brokerEntitykeyParameter = brokerEntitykey != null ?
                new ObjectParameter("BrokerEntitykey", brokerEntitykey) :
                new ObjectParameter("BrokerEntitykey", typeof(string));
    
            var brokerEntityIdParameter = brokerEntityId.HasValue ?
                new ObjectParameter("BrokerEntityId", brokerEntityId) :
                new ObjectParameter("BrokerEntityId", typeof(System.Guid));
    
            var productlineIdParameter = productlineId.HasValue ?
                new ObjectParameter("ProductlineId", productlineId) :
                new ObjectParameter("ProductlineId", typeof(short));
    
            var productlineSubTypeidParameter = productlineSubTypeid.HasValue ?
                new ObjectParameter("ProductlineSubTypeid", productlineSubTypeid) :
                new ObjectParameter("ProductlineSubTypeid", typeof(short));
    
            var isBrokerEntityParameter = isBrokerEntity.HasValue ?
                new ObjectParameter("isBrokerEntity", isBrokerEntity) :
                new ObjectParameter("isBrokerEntity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchBrokerEntityByProductLine_Result>("SearchBrokerEntityByProductLine", brokerIdParameter, brokerEntitykeyParameter, brokerEntityIdParameter, productlineIdParameter, productlineSubTypeidParameter, isBrokerEntityParameter);
        }
    
        public virtual ObjectResult<GetPolicyTypeList_Result> GetPolicyTypeList(Nullable<int> productLineid, Nullable<int> productLineSubTypeId, string attachment)
        {
            var productLineidParameter = productLineid.HasValue ?
                new ObjectParameter("productLineid", productLineid) :
                new ObjectParameter("productLineid", typeof(int));
    
            var productLineSubTypeIdParameter = productLineSubTypeId.HasValue ?
                new ObjectParameter("productLineSubTypeId", productLineSubTypeId) :
                new ObjectParameter("productLineSubTypeId", typeof(int));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("attachment", attachment) :
                new ObjectParameter("attachment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPolicyTypeList_Result>("GetPolicyTypeList", productLineidParameter, productLineSubTypeIdParameter, attachmentParameter);
        }
    
        public virtual ObjectResult<SearchInsuredList_Result> SearchInsuredList(string insured, Nullable<System.Guid> insuredPartyId, Nullable<int> type, Nullable<int> childInsuredId, Nullable<System.Guid> addressId)
        {
            var insuredParameter = insured != null ?
                new ObjectParameter("insured", insured) :
                new ObjectParameter("insured", typeof(string));
    
            var insuredPartyIdParameter = insuredPartyId.HasValue ?
                new ObjectParameter("insuredPartyId", insuredPartyId) :
                new ObjectParameter("insuredPartyId", typeof(System.Guid));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var childInsuredIdParameter = childInsuredId.HasValue ?
                new ObjectParameter("childInsuredId", childInsuredId) :
                new ObjectParameter("childInsuredId", typeof(int));
    
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("AddressId", addressId) :
                new ObjectParameter("AddressId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchInsuredList_Result>("SearchInsuredList", insuredParameter, insuredPartyIdParameter, typeParameter, childInsuredIdParameter, addressIdParameter);
        }
    
        public virtual ObjectResult<SearchUnderwriterByProductLine_Result> SearchUnderwriterByProductLine(string key, Nullable<int> regionId, Nullable<int> underWriterId, Nullable<int> productLineId)
        {
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            var underWriterIdParameter = underWriterId.HasValue ?
                new ObjectParameter("underWriterId", underWriterId) :
                new ObjectParameter("underWriterId", typeof(int));
    
            var productLineIdParameter = productLineId.HasValue ?
                new ObjectParameter("productLineId", productLineId) :
                new ObjectParameter("productLineId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchUnderwriterByProductLine_Result>("SearchUnderwriterByProductLine", keyParameter, regionIdParameter, underWriterIdParameter, productLineIdParameter);
        }
    }
}
